openapi: 3.0.3
info:
  title: Ignite Backend (Prototype)
  version: 0.2.0
  description: >
    Authentication endpoints for registration with OTP, verification, resend,
    passwordless resume tokens, login, and token refresh.

servers:
  - url: http://localhost:5000/api
    description: Local dev

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication, verification, sessions
  - name: Profile
    description: Profile data, skills, media, and preferences
  - name: Handles
    description: Public profile handles (unique slugs)
  - name: Search
    description: User search and discovery
  - name: Connections
    description: Connection requests and networking

paths:
  /auth/register:
    post:
      tags: ["Auth"]
      summary: Register new account
      description: |
        **Flow**
        1) Validate payload (email format, zID `^z[0-9]{7}$`, password ≥ 8, confirm matches).
        2) Reject if email already belongs to an **ACTIVE** user (`EMAIL_EXISTS`).
        3) Reject if zID is already used by an **ACTIVE** user (`ZID_EXISTS`).
        4) If a **PENDING** signup exists (same email or same zID), return **409 `PENDING_VERIFICATION_EXISTS`**
           with a **fresh 30-min resumeToken**.
        5) If an **EXPIRED** signup exists **for the same zID**, **revive** it to `PENDING_VERIFICATION`
           (updating `signup_email` if different), **send OTP**, and return 201 + resumeToken.
        6) Otherwise, create a new `PENDING_VERIFICATION` signup, **send OTP**, and return 201 + resumeToken.

        **Side effects**
        - Stores a hashed OTP (`otp_hash`) with **TTL +10m**, resets counters (`otp_attempts=0`, `resend_count=0`),
          and sets `last_otp_sent_at`.
        - Logs a registration event (no PII beyond `userId`).

        **Rate limit**
        - **10 requests/hour** per **(IP + email)** → **429** thereafter.

        **Notes**
        - The **resumeToken** is prefixed with `res_` and **expires in 30 minutes**.
        - Follows a **zID-first revival policy**. If an EXPIRED signup exists for the same **email** but **different zID**,
          return **409 `ZID_MISMATCH`**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            examples:
              valid:
                value:
                  fullName: Jane Doe
                  zid: z1234567
                  level: undergrad
                  yearIntake: 2024
                  isIndonesian: true
                  program: BE
                  major: Software Engineering
                  email: jane@gmail.com
                  password: Abcd1234
                  confirmPassword: Abcd1234
      responses:
        "201":
          description: Created (new or revived PENDING signup; OTP email sent)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterCreated"
              examples:
                created_new:
                  value:
                    success: true
                    userId: "a3c5b2c1-7c21-4eaa-bf9e-2a90b6b3a111"
                    resumeToken: "res_eyJhbGciOi..."
                revived:
                  value:
                    success: true
                    userId: "3f1d6b22-6e22-45f8-8b9d-9bcbe0a1d222"
                    resumeToken: "res_eyJhbGciOi..."
        "400":
          description: Validation error (zod)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              examples:
                bad_email:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        email: [Invalid email]
                password_mismatch:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        confirmPassword: [Passwords do not match]
        "409":
          description: Conflict — active user exists or pending already created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorSimple"
                  - $ref: "#/components/schemas/PendingExists"
              examples:
                email_exists: { value: { code: EMAIL_EXISTS } }
                zid_exists:   { value: { code: ZID_EXISTS } }
                pending_exists:
                  value:
                    code: PENDING_VERIFICATION_EXISTS
                    resumeToken: "res_eyJhbGciOi..."
                zid_mismatch: { value: { code: ZID_MISMATCH } }
        "429":
          description: "Too many requests (10 req/hour per IP+email)"
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/verify-otp:
    post:
      tags: ["Auth"]
      summary: Verify OTP (Activate account)
      description: |
        Verify the 6-digit OTP for a **PENDING_VERIFICATION** signup.
        On success, the account becomes **ACTIVE**, OTP row is deleted, and the resumeToken is invalidated.

        **Rules**
        - `resumeToken` must be valid and map to a pending signup.
        - OTP must match the stored hash, not be expired, and attempts must be < 5.

        **Side effects**
        - On success: `status=ACTIVE`, `email_verified_at=now`, delete OTP row, invalidate resume token.
        - On failure: increment attempts; at 5 attempts the OTP is locked.

        **Rate limit**
        - **10 requests / 10 minutes** per (IP + resumeToken) → 429 thereafter.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequest"
            examples:
              valid:
                value: { resumeToken: "res_eyJhbGciOi...", otp: "123456" }
      responses:
        "200":
          description: OTP verified; account activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyOtpOK"
              examples:
                ok: { value: { success: true, message: "Account verified successfully" } }
        "400":
          description: Bad/expired OTP or validation error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorSimple"
                  - $ref: "#/components/schemas/ValidationError"
              examples:
                otp_invalid: { value: { code: OTP_INVALID } }
                otp_expired: { value: { code: OTP_EXPIRED } }
        "401":
          description: Invalid or expired resume token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                bad_token: { value: { code: RESUME_TOKEN_INVALID } }
        "404":
          description: Pending signup or OTP not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found: { value: { code: PENDING_NOT_FOUND } }
        "409":
          description: User already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                already_verified: { value: { code: ALREADY_VERIFIED } }
        "423":
          description: OTP locked after too many failed attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                locked: { value: { code: OTP_LOCKED } }
        "429":
          description: Too many requests (rate limit hit)
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/resend-otp:
    post:
      tags: ["Auth"]
      summary: Resend OTP for a pending signup
      description: |
        Issues a **new 6-digit OTP** (overwriting the previous one), resets attempts, and updates
        `last_otp_sent_at` + `resend_count`.

        **Rules**
        - Requires a valid `resumeToken`.
        - Signup must be `PENDING_VERIFICATION` (not ACTIVE/EXPIRED).
        - Enforces per-user cooldown and daily cap **before** sending:
          - Cooldown: **60s** between sends → `OTP_COOLDOWN` (429)
          - Daily cap: **5/day** → `OTP_RESEND_LIMIT` (429)

        **Rate limit**
        - Endpoint itself: **3 requests / minute** per (IP + resumeToken).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendOtpRequest"
            examples:
              ok:
                value: { resumeToken: "res_eyJhbGciOi..." }
      responses:
        "200":
          description: OTP reissued and email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResendOtpOK"
              examples:
                success: { value: { success: true } }
        "400":
          description: Validation error (missing resumeToken)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                bad_body: { value: { code: VALIDATION_ERROR } }
        "401":
          description: Invalid or expired resume token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                bad_token: { value: { code: RESUME_TOKEN_INVALID } }
        "404":
          description: Pending signup not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found: { value: { code: PENDING_NOT_FOUND } }
        "409":
          description: Already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                already_verified: { value: { code: ALREADY_VERIFIED } }
        "429":
          description: Cooldown/cap hit or per-endpoint rate limit
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                cooldown: { value: { code: OTP_COOLDOWN } }
                daily_cap: { value: { code: OTP_RESEND_LIMIT } }
                too_many:  { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/pending/email:
    patch:
      tags: ["Auth"]
      summary: Change Email (Pre-Verification)
      description: |
        Allows unverified users to fix a mistyped email before completing verification.

        **Flow**

        1) Validate `resumeToken` and `newEmail` format.
        2) Ensure no ACTIVE user already owns `newEmail` → **409 `EMAIL_EXISTS`**.
        3) Ensure user status = `PENDING_VERIFICATION` → **409 `ALREADY_VERIFIED`** if ACTIVE.
        4) Update user email in database.
        5) Invalidate all prior OTP + resumeToken.
        6) Rotate a new resumeToken bound to newEmail.
        7) Generate new OTP (+10m), reset counters (otp_attempts=0, otp_resend_count=0).
        8) Send new OTP email to the new address.

        **Side effects**
        - Updates `signup_email` in `user_signups` table
        - Clears existing OTP state (hash, expiry, attempts)
        - Invalidates the old resume token
        - Issues fresh resume token with 30min TTL
        - Sends new 6-digit OTP email with 10min TTL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailPreVerifyRequest'
            examples:
              valid:
                value:
                  resumeToken: "res_eyJhbGciOi..."
                  newEmail: "jane.new@gmail.com"
      responses:
        '200':
          description: Email changed; Invalidates existing OTP & token; Sends new OTP & token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeEmailPreVerifyOK'
              examples:
                ok:
                  value:
                    success: true
                    resumeToken: "res_def456eyJbg..."
        '400':
          description: Validation error (zod)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        '401':
          description: Invalid or expired resume token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                bad_token:
                  value:
                    code: RESUME_TOKEN_INVALID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                user_not_found:
                  value:
                    code: PENDING_NOT_FOUND
        '409':
          description: New email already used by active user or user is already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                email_exists:
                  value:
                    code: EMAIL_EXISTS
                already_verified:
                  value:
                    code: ALREADY_VERIFIED

  /auth/pending/context?resumeToken=RES_xxx:
    get:
      tags: ["Auth"]
      summary: Get pending registration context
      description: |
        Return lightweight context for a pending signup using a secure resumeToken (issued by Story 1.1). 
        The Verify screen calls this to decide what to show (email mask, resend state), or to fail fast 
        if the signup is already verified/expired.

        **Validation & Logic**
        - Validate resumeToken (signature/TTL); locate user.
        - Only return context when status = PENDING_VERIFICATION.
        - Compute resend state from last_otp_sent_at, otp_resend_count (cooldown = 60s; daily cap = 5).
        - Do not leak PII: return masked email only (never raw email).
        - No OTP or sensitive fields should be returned.
      parameters:
        - name: resumeToken
          in: query
          required: true
          description: Resume token issued during registration
          schema:
            type: string
            example: 'res_xxxxx...'
      responses:
        '200':
          description: Pending context retrieved success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingContextOK'
              examples:
                success:
                  value:
                    emailMasked: "j***@u***.edu"
                    status: "PENDING_VERIFICATION"
                    resend:
                      cooldownSeconds: 37
                      remainingToday: 3
        '401':
          description: Invalid token or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                bad_token:
                  value:
                    code: RESUME_TOKEN_INVALID
        '404':
          description: User expired/cleaned up or missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                expired_user:
                  value:
                    code: PENDING_NOT_FOUND
        '409':
          description: User already active
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                active_user:
                  value:
                    code: ALREADY_VERIFIED

  /auth/login:
    post:
      tags: ["Auth"]
      summary: Log in a user
      description: |
        Authenticates an **ACTIVE** user with their email and password.

        On success, returns a short-lived **accessToken** (~15 min) and sets a long-lived
        **refreshToken** (~7 days) in a `Secure`, `HttpOnly` cookie.
      requestBody:
        $ref: "#/components/requestBodies/LoginBody"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: The refresh token cookie for maintaining sessions.
              schema:
                type: string
                example: refreshToken=rft_eyJhbGciOi...; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=604800
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"
              examples:
                success:
                  value:
                    success: true
                    userId: "usr_abc123"
                    accessToken: "jwt_eyJhbGciOi..."
                    expiresIn: 900
        "400":
          description: Validation error for missing or invalid fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                missing_fields: { value: { code: VALIDATION_ERROR } }
        "401":
          description: Invalid credentials (unknown email or wrong password).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                invalid: { value: { code: INVALID_CREDENTIALS } }
        "403":
          description: The user's account is not in an ACTIVE state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_active: { value: { code: ACCOUNT_NOT_VERIFIED } }
        "429":
          description: Too many failed login attempts (rate limit hit).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/refresh:
    post:
      tags: ["Auth"]
      summary: Refresh access token
      description: >
        Issues a new `accessToken` using the `refreshToken` stored in the `HttpOnly` cookie.
      responses:
        "200":
          description: Token refreshed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshSuccess"
              examples:
                success:
                  value:
                    success: true
                    accessToken: "jwt_eyJhbGciOi..."
                    expiresIn: 900
        "401":
          description: Refresh token is missing, invalid, or expired.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                no_token:      { value: { code: NO_REFRESH_TOKEN } }
                invalid_token: { value: { code: INVALID_REFRESH_TOKEN } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/logout:
    post:
      tags: ["Auth"]
      summary: Log out user
      description: |
        Securely logs out the user by invalidating their refresh token and clearing the refresh token cookie.
        
        **Security Features:**
        - Invalidates the refresh token server-side by incrementing the token version
        - Clears the refresh token cookie from the browser
        - All existing access tokens become invalid immediately
        - Idempotent: safe to call multiple times
        
        **Token Invalidation:**
        - Uses token versioning to immediately invalidate all existing tokens
        - No database lookups required on subsequent requests
        - Scales efficiently with high traffic
      responses:
        "200":
          description: Logout successful.
          headers:
            Set-Cookie:
              description: Clears the refresh token cookie
              schema:
                type: string
                example: refreshToken=; HttpOnly; Secure; SameSite=Lax; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT
          content:
            application/json:
              schema:
                type: object
                required: [success]
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                success:
                  value:
                    success: true
        "401":
          description: No valid session or refresh token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value: { code: NOT_AUTHENTICATED }
        "500":
          $ref: "#/components/responses/InternalError"

  /user/email/change-request:
    post:
      tags: ["Auth"]
      summary: Request email change for verified users
      description: |
        Allows verified users to request an email change by providing their current password and new email.
        
        **Flow**
        1) Validate JWT access token from Authorization header
        2) Validate new email format and current password
        3) Verify current password against stored hash
        4) Check that new email is not already used by another active user
        5) Generate OTP and create pending email change record
        6) Send OTP to new email address
        7) Return masked email and expiry information
        
        **Security Features**
        - Requires valid JWT access token
        - Requires current password verification
        - Prevents email takeover by checking existing users
        - OTP expires in 10 minutes (600 seconds)
        - Email address is masked in response for privacy
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailRequest'
            examples:
              valid:
                value:
                  newEmail: "john.new@gmail.com"
                  currentPassword: "MySecurePassword123"
      responses:
        '200':
          description: Email change request created; OTP sent to new email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeEmailRequestResponse'
              examples:
                success:
                  value:
                    success: true
                    emailMasked: "j***@g***il.com"
                    expiresInSeconds: 600
        '400':
          description: Validation error or incorrect password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                incorrect_password:
                  value:
                    code: VALIDATION_ERROR
                    details: "Incorrect password"
        '401':
          description: Not authenticated or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
                    details: "Invalid or expired token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                user_not_found:
                  value:
                    code: USER_NOT_FOUND
                    details: "User not found"
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                email_exists:
                  value:
                    code: EMAIL_EXISTS
                    details: "Given email is already used"
        '500':
          $ref: "#/components/responses/InternalError"

  /user/email/verify-change:
    post:
      tags: ["Auth"]
      summary: Verify email change with OTP
      description: |
        Verifies the email change using the OTP sent to the new email address.
        
        **Flow**
        1) Validate JWT access token
        2) Retrieve pending email change for user
        3) Verify OTP is valid, not expired, and not locked
        4) Complete the email change in database
        5) Invalidate refresh tokens (security measure)
        6) Issue new access and refresh tokens
        7) Set new refresh token cookie
        
        **Security Features**
        - OTP attempt limiting (5 attempts max, then locked)
        - OTP expiry (10 minutes)
        - Token rotation after email change
        - All existing sessions are invalidated
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailChangeRequest'
            examples:
              valid:
                value:
                  otp: "123456"
      responses:
        '200':
          description: Email change verified successfully
          headers:
            Set-Cookie:
              description: New refresh token cookie
              schema:
                type: string
                example: refreshToken=rft_eyJhbGciOi...; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=604800
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmailChangeResponse'
              examples:
                success:
                  value:
                    success: true
                    message: "Email updated successfully"
                    newAccessToken: "jwt_eyJhbGciOi..."
        '400':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                otp_invalid:
                  value:
                    code: OTP_INVALID
                otp_expired:
                  value:
                    code: OTP_EXPIRED
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
                    details: "Invalid or expired token"
        '404':
          description: No pending email change found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                no_pending:
                  value:
                    code: NO_PENDING_EMAIL_CHANGE
        '423':
          description: OTP locked due to too many attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                otp_locked:
                  value:
                    code: OTP_LOCKED

  /user/email/resend-otp:
    post:
      tags: ["Auth"]
      summary: Resend OTP for email change
      description: |
        Resends the OTP for pending email change with rate limiting and cooldown protection.
        
        **Rate Limiting**
        - 5 requests per day per (IP + email)
        - 60 second cooldown between requests
        - Maximum 5 resends per pending change
        
        **Flow**
        1) Validate JWT access token
        2) Check for pending email change
        3) Enforce cooldown and resend limits
        4) Generate new OTP
        5) Send OTP to pending email
        6) Update resend counters
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OTP resent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendEmailOtpResponse'
              examples:
                success:
                  value:
                    success: true
                    expiresInSeconds: 600
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
                    details: "Invalid or expired token"
        '404':
          description: No pending email change found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                no_pending:
                  value:
                    code: NO_PENDING_EMAIL_CHANGE
        '429':
          description: Rate limit exceeded or cooldown active
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                cooldown:
                  value:
                    code: OTP_COOLDOWN
                resend_limit:
                  value:
                    code: OTP_RESEND_LIMIT
        '500':
          $ref: "#/components/responses/InternalError"

  /user/email/cancel-change:
    delete:
      tags: ["Auth"]
      summary: Cancel pending email change
      description: |
        Cancels any pending email change for the authenticated user.
        
        **Flow**
        1) Validate JWT access token
        2) Delete pending email change record from database
        
        **Notes**
        - Idempotent operation (safe to call even if no pending change exists)
        - Does not require additional verification
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Email change cancelled successfully
          content:
            application/json:
              schema:
                type: object
                required: [success]
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                success:
                  value:
                    success: true
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        '500':
          $ref: "#/components/responses/InternalError"

  /auth/password/request-reset:
    post:
      tags: ["Auth"]
      summary: Request Password Reset (Start)
      description: |
        Starts the password-reset flow in an **enumeration-safe** way.

        **Behavior**
        - Always returns **200** with a generic message.
        - If an **ACTIVE** account exists for the email, create/overwrite a single `user_otps` row
          with `purpose="RESET_PASSWORD"` (hashed OTP, TTL +10m, attempts=0, resend_count=0, last_sent_at=now)
          and send the 6-digit code via email.
        - If the user is not ACTIVE (or does not exist), still respond **200** without sending an OTP.

        **Rate limit**
        - **5 requests / 10 minutes** per **(IP + email)** → **429** thereafter.

        **Enumeration safety**
        - Response body never reveals whether the email exists.
      security: []  # public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmailOnlyRequest" }
            examples:
              ok:
                value: { email: "jane@gmail.com" }
      responses:
        "200":
          description: Generic success (enumeration-safe)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResetGenericOk" }
              examples:
                ok:
                  value:
                    success: true
                    message: "If this email exists, a code has been sent."
        "400":
          description: Validation error (zod)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
              examples:
                invalid_email:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        email: [Invalid email]
        "429":
          description: "Too many requests (5 / 10 min per IP+email)"
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/password/verify-otp:
    post:
      tags: ["Auth"]
      summary: Verify Password Reset OTP (Create reset session)
      description: |
        Validates a 6-digit OTP for the **RESET_PASSWORD** flow. On success, returns a short-lived
        `resetSessionToken` (JWT, ~10 minutes) that authorizes setting a new password.

        **Errors are enumeration-safe**
        - For unknown/non-ACTIVE email or missing OTP row: respond with **400 `OTP_INVALID`**.
        - If attempts reach 5, OTP is **locked** → **423 `OTP_LOCKED`** (subsequent attempts).
      security: []  # public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/VerifyPasswordResetOtpRequest" }
            examples:
              valid:
                value: { email: "jane@gmail.com", otp: "123456" }
      responses:
        "200":
          description: OTP verified; reset session created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/VerifyPasswordResetOtpResponse" }
              examples:
                ok:
                  value:
                    success: true
                    resetSessionToken: "rst_eyJ..."
                    expiresIn: 600
        "400":
          description: Bad request — validation or OTP failure
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ValidationError"
                  - $ref: "#/components/schemas/ErrorSimple"
              examples:
                otp_invalid: { value: { code: OTP_INVALID } }
                otp_expired: { value: { code: OTP_EXPIRED } }
        "423":
          description: OTP locked after too many attempts
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                locked: { value: { code: OTP_LOCKED } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/password/reset:
    post:
      tags: ["Auth"]
      summary: Set New Password (Complete)
      description: |
        Sets a new password for the user identified by a valid `resetSessionToken`. Enforces password policy,
        updates the password hash, and **revokes all refresh tokens** (logs out other devices). No new tokens
        are issued automatically—user must log in again.

        **Errors**
        - **401 `RESET_SESSION_INVALID`** if token is bad/expired or not mapped to an ACTIVE signup.
      security: []  # public endpoint (auth via resetSessionToken, not bearer)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResetPasswordRequest" }
            examples:
              valid:
                value:
                  resetSessionToken: "rst_eyJ..."
                  newPassword: "NewAbcd1234"
                  confirmPassword: "NewAbcd1234"
      responses:
        "200":
          description: Password updated and existing sessions revoked
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResetPasswordResponse" }
              examples:
                ok:
                  value:
                    success: true
                    message: "Password has been reset"
        "400":
          description: Validation error (zod)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
              examples:
                mismatch:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        confirmPassword: [Passwords do not match]
        "401":
          description: Invalid/expired reset session
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                bad_token: { value: { code: RESET_SESSION_INVALID } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/password/resend-otp:
    post:
      tags: ["Auth"]
      summary: Resend Password Reset OTP
      description: |
        Resends a fresh OTP for the **RESET_PASSWORD** flow in an **enumeration-safe** way.

        **Behavior**
        - Always returns **200** with a generic message.
        - If an **ACTIVE** user exists and cooldown/daily cap allow:
          overwrite the single `RESET_PASSWORD` OTP row (new hash + TTL), reset attempts, update timers, send email.

        **Rate limit**
        - **5 requests / 10 minutes** per **(IP + email)** → **429** thereafter.
      security: []  # public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmailOnlyRequest" }
            examples:
              ok:
                value: { email: "jane@gmail.com" }
      responses:
        "200":
          description: Generic success (enumeration-safe)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ResetGenericOk" }
              examples:
                ok:
                  value:
                    success: true
                    message: "If this email exists, a new code has been sent."
        "400":
          description: Validation error (zod)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
              examples:
                invalid_email:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        email: [Invalid email]
        "429":
          description: "Too many requests (5 / 10 min per IP+email)"
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/password/cancel:
    post:
      tags: ["Auth"]
      summary: Cancel Password Reset
      description: |
        Cancels an in-progress password reset by clearing any active `RESET_PASSWORD` OTP.
        Always returns **200** (enumeration-safe), regardless of whether the email exists.
      security: []  # public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EmailOnlyRequest" }
            examples:
              ok:
                value: { email: "jane@gmail.com" }
      responses:
        "200":
          description: Generic success (enumeration-safe)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SuccessOnly" }
              examples:
                ok: { value: { success: true } }
        "400":
          description: Validation error (zod)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
              examples:
                invalid_email:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        email: [Invalid email]
        "429":
          description: "Too many requests (5 / 10 min per IP+email)"
          headers:
            X-RateLimit-Limit:     { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset:     { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
        "500":
          $ref: "#/components/responses/InternalError"

  /profile/me:
    get:
      tags: ["Profile"]
      summary: Get current user's profile core details
      description: |
        Returns the full profile record for the authenticated user (owner view; no visibility filtering).
        This allows users to view their own profile information.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProfileOK"
              examples:
                complete_profile:
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    fullName: "Jane Doe"
                    handle: "janedoe"
                    photoUrl: "https://example.com/profile.jpg"
                    bannerUrl: "https://example.com/banner.jpg"
                    isIndonesian: true
                    program: "BE"
                    major: "Computer Science"
                    level: "undergrad"
                    yearStart: 2020
                    yearGrad: 2024
                    zid: "z1234567"
                    headline: "Software Engineer"
                    domicileCity: "Sydney"
                    domicileCountry: "AU"
                    citizenshipStatus: "Permanent Resident"
                    bio: "Passionate about building innovative software solutions."
                    socialLinks:
                      linkedin: "https://www.linkedin.com/in/janedoe"
                      github: "https://github.com/janedoe"
                      website: "https://janedoe.dev"
                    createdAt: "2024-01-15T10:30:00Z"
                    updatedAt: "2024-03-20T14:45:00Z"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED

  /profile:
    patch:
      tags: ["Profile"]
      summary: Update user profile basic details
      description: |
        Updates core profile fields for the authenticated user. Only provided fields are updated (partial update).
        Excludes photoUrl, handle, and socialLinks which have their own dedicated endpoints.
        
        **Validation:**
        - `level`: Must be one of foundation, diploma, undergrad, postgrad, phd
        - `yearStart`, `yearGrad`: Must be between 2000-2100
        - `yearGrad`: Must be after `yearStart` if both provided
        - `domicileCountry`: Must be ISO country code (2 uppercase letters)
        - `citizenshipStatus`: Must be either Citizen or Permanent Resident
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
            examples:
              full_update:
                summary: Complete profile update
                value:
                  fullName: "Jane Doe"
                  headline: "Backend Engineer @ Acme | AI/ML"
                  isIndonesian: true
                  program: "BE"
                  major: "Software Engineering"
                  level: "undergrad"
                  yearStart: 2022
                  yearGrad: 2026
                  domicileCity: "Sydney"
                  domicileCountry: "AU"
                  citizenshipStatus: "Citizen"
                  bio: "I ship boring, reliable services."
              partial_update:
                summary: Partial update (only some fields)
                value:
                  fullName: "Updated Name"
                  bio: "Updated bio only"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessOnly"
              examples:
                success:
                  value:
                    success: true
        "400":
          description: Validation error; Invalid country code, invalid academic level enum, invalid year range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL 

  /profile/skills:
    get:
      tags: ["Profile"]
      summary: List all skills for the authenticated user
      description: |
        Returns all skills linked to the authenticated user's profile via `profile_skills`.
        Names are deduped and sorted alphabetically.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of skills for the user (may be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
              examples:
                some_skills:
                  value:
                    - id: 12
                      name: Python
                    - id: 34
                      name: SQL
                no_skills:
                  value: []
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
                    details: "Invalid or expired token"
    post:
      tags: ["Profile"]
      summary: Add a skill to the authenticated user's profile
      description: |
        Adds a skill to the user's profile. The skill is normalized and ensured to exist in the skills lookup table. Association is idempotent.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [skill]
              properties:
                skill:
                  type: string
                  example: Python
      responses:
        "201":
          description: Skill added to profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  id:
                    type: integer
                    example: 12
                  name:
                    type: string
                    example: Python
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      skill: Skill is required
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED

  /profile/skills/{id}:
    delete:
      tags: ["Profile"]
      summary: Remove a skill from the authenticated user's profile
      description: |
        Deletes the association between the authenticated user and the given skill by id.
        Idempotent: returns 200 even if the association does not exist.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Skill ID to remove from the profile
          schema:
            type: integer
      responses:
        "200":
          description: Skill association removed (or already deleted)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                deleted:
                  value:
                    success: true
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Skill not found or not owned by user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found:
                  value:
                    code: NOT_FOUND

  /profile/educations:
    get:
      tags: ["Profile"]
      summary: List all educations for the authenticated user
      description: |
        Returns all educations for the authenticated user, sorted by:
        endYear DESC NULLS LAST, endMonth DESC NULLS LAST, startYear DESC, startMonth DESC.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully fetch all educations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Education"
              examples:
                one_education:
                  value:
                    - id: "edu_123"
                      school: "UNSW"
                      program: "Bachelor of Engineering"
                      major: "Software Engineering"
                      startMonth: 2
                      startYear: 2022
                      endMonth: null
                      endYear: null
                no_educations:
                  value: []
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED

    post:
      tags: ["Profile"]
      summary: Add an education to the authenticated user's profile
      description: |
        Creates a new education record for the authenticated user. 
        
        **Validation:**
        - `school`: Required, 1-30 characters
        - `startMonth`: Required, 1-12
        - `startYear`: Required, 1900-2100
        - `endMonth`, `endYear`: Both must be provided or both must be null
        - End date must be same as or after start date
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddEducationRequest"
            examples:
              complete_education:
                summary: Current student (no end date)
                value:
                  school: "UNSW"
                  program: "Bachelor of Engineering"
                  major: "Software Engineering"
                  startMonth: 2
                  startYear: 2022
                  endMonth: 2
                  endYear: 2026
      responses:
        "201":
          description: Education added successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, id]
                properties:
                  success:
                    type: boolean
                    example: true
                  id:
                    type: string
                    description: Unique education record identifier
                    example: "edu_456"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      school: ["Required"]
                      endMonth: ["If either endMonth or endYear is provided, both must be present"]
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED

  /profile/educations/{id}:
    patch:
      tags: ["Profile"]
      summary: Update an education record
      description: |
        Updates an existing education record for the authenticated user.
        Only provided fields are updated (partial update).
        
        **Validation:**
        - `school`: 1-30 characters
        - `program`: valid string
        - `major`: valid string
        - `endMonth`, `endYear`: Both must be provided or both must be null
        - End date must be same as or after start date if both start and end are provided
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Education record ID to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEducationRequest"
            examples:
              complete_update:
                value:
                  school: "University of Sydney"
                  program: "Master of Information Technology"
                  major: "Cybersecurity"
                  endMonth: 12
                  endYear: 2024
      responses:
        "200":
          description: Education updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessOnly"
              examples:
                success:
                  value:
                    success: true
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Education record not found or not owned by user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found:
                  value:
                    code: NOT_FOUND
    delete:
      tags: ["Profile"]
      summary: Delete an education record
      description: |
        Deletes an education record owned by the authenticated user.
        
        **Idempotent:** Returns 200 if education is already deleted.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Education record ID to delete
          schema:
            type: string
      responses:
        "200":
          description: Education deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessOnly"
              examples:
                success:
                  value:
                    success: true
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Not found / not owned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_FOUND

  /profile/social-links:
    patch:
      tags: ["Profile"]
      summary: Update social links
      description: Replace entire `social_links` JSON with a validated object.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [socialLinks]
              properties:
                socialLinks:
                  type: object
                  additionalProperties: false
                  properties:
                    linkedin: { type: string, format: uri, example: "https://www.linkedin.com/in/janedoe" }
                    github:   { type: string, format: uri, example: "https://github.com/janedoe" }
                    x:        { type: string, format: uri, example: "https://x.com/janedoe" }
                    website:  { type: string, format: uri, example: "https://janedoe.dev" }
      responses:
        "200":
          description: Replaced successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
        "500":
          $ref: "#/components/responses/InternalError"

  /profile/experiences:
    get:
      tags: ["Profile"]
      summary: List all experiences for the authenticated user
      description: |
        Returns all experiences for the **authenticated** user.
        Sorted by:
        - `isCurrent` **DESC**
        - `endYear` **DESC** `NULLS LAST`
        - `endMonth` **DESC** `NULLS LAST`
        - `startYear` **DESC**
        - `startMonth` **DESC**
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Experiences for the current user (returns [] if empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Experience"
              examples:
                example:
                  value:
                    - id: "exp_123"
                      title: "Software Engineer"
                      company: "Acme Corp"
                      fieldOfWork: "Software Engineering"
                      startMonth: 2
                      startYear: 2023
                      endMonth: null
                      endYear: null
                      isCurrent: true
                      employmentType: "Full Time"
                      locationCity: "Sydney"
                      locationCountry: "AU"
                      locationType: "Hybrid"
                      description: "Backend APIs and auth services."
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      tags: ["Profile"]
      summary: Add a new experience for the authenticated user
      description: |
        Create a new work/volunteer experience for the authenticated user.

        **Date rules**
        - If `isCurrent` is **true**, `endMonth` and `endYear` must be omitted.
        - If `isCurrent` is **false**, both `endMonth` and `endYear` are required.
        - `(endYear, endMonth)` must be the same month or after `(startYear, startMonth)`.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperienceCreateRequest"
            examples:
              valid:
                value:
                  roleTitle: "Backend Developer"
                  company: "Techify"
                  fieldOfWork: "Software Engineering"
                  employmentType: "internship"
                  locationCity: "Jakarta"
                  locationCountry: "ID"
                  locationType: "on_site"
                  startMonth: 6
                  startYear: 2022
                  endMonth: 1
                  endYear: 2023
                  isCurrent: false
                  description: "Worked on authentication and session services."
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required: [success, id]
                properties:
                  success: { type: boolean }
                  id: { type: string, description: "Experience id (uuid)" }
              examples:
                created:
                  value: { success: true, id: "exp_456" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                bad_payload: { value: { code: VALIDATION_ERROR } }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "500":
          $ref: "#/components/responses/InternalError"

  /profile/experiences/{id}:
    patch:
      tags: ["Profile"]
      summary: Update one existing experience for the authenticated user
      description: |
        Partial update for a single experience owned by the authenticated user.

        **Validation**
        - Same rules as create:
          - If `isCurrent` is **true**, `endMonth` and `endYear` must be omitted.
          - If `isCurrent` is **false**, both `endMonth` and `endYear` are required.
          - `(endYear, endMonth)` must be the same month or after `(startYear, startMonth)`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, description: "Experience id (uuid)" }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperienceUpdateRequest"
            examples:
              sample:
                value:
                  roleTitle: "Senior Backend Developer"
                  isCurrent: true
                  endMonth: null
                  endYear: null
                  employmentType: "full_time"
                  locationType: "hybrid"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                required: [success]
                properties:
                  success: { type: boolean }
              examples:
                ok: { value: { success: true } }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                bad: { value: { code: VALIDATION_ERROR } }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "404":
          description: Experience not found or not owned
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                not_found: { value: { code: NOT_FOUND } }
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      tags: ["Profile"]
      summary: Delete one experience for the authenticated user
      description: >
        Deletes an experience by `id` if it belongs to the authenticated user.

        Idempotent: deleting an already-deleted `id` still returns 200.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, description: "Experience id (uuid)" }
      responses:
        "200":
          description: Deleted (or already deleted)
          content:
            application/json:
              schema:
                type: object
                required: [success]
                properties:
                  success: { type: boolean }
              examples:
                ok: { value: { success: true } }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "404":
          description: Not found or not owned
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                not_found: { value: { code: NOT_FOUND } }
        "500":
          $ref: "#/components/responses/InternalError"

  /profile/handle:
    patch:
      tags: ["Handles"]
      summary: Set or change profile handle (slug)
      description: >
        Claim or update a unique, public handle for the authenticated user.
        Must match `^[a-z0-9_.-]{3,30}$` and is unique case-insensitively.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HandleRequest"
            examples:
              ok: { value: { handle: "janedoe" } }
      responses:
        "200":
          description: Handle set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HandleOK"
              examples:
                ok: { value: { success: true, handle: "janedoe" } }
        "400":
          description: Invalid format or length
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                bad_format: { value: { code: VALIDATION_ERROR } }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "409":
          description: Handle already taken
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                taken: { value: { code: HANDLE_TAKEN } }
        "500":
          $ref: "#/components/responses/InternalError"

  /handles/check:
    get:
      tags: ["Handles"]
      summary: Check handle availability
      description: >
        Validates format and checks if the handle is available (case-insensitive).
      parameters:
        - name: handle
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-z0-9_.-]{3,30}$"
          example: janedoe
      responses:
        "200":
          description: Availability result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HandleAvailability"
              examples:
                free:  { value: { available: true } }
                taken: { value: { available: false } }
        "400":
          description: Invalid format
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                bad_format: { value: { code: VALIDATION_ERROR } }
        "500":
          $ref: "#/components/responses/InternalError"

  /directory/search:
    get:
      tags: ["Search"]
      summary: Search member directory
      description: |
        Returns a paginated list of public profiles matching the given filters.
        - **OR within** each list param (`major`, `companies`, `workFields`, `cities`, `citizenship`)
        - **AND across** different params (e.g., `major` AND `cities`)
        - `cities` must exactly match values from `/lookup/cities` (case-insensitive)
        - `citizenship` allow-list: `Citizen`, `Permanent Resident`
        - If `q` is absent and `sortBy=relevance`, treat as `name_asc`
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Case-insensitive partial match on full name
          example: "jane"
        - in: query
          name: major
          schema: { type: string }
          description: Comma-separated list of **major names** (case-insensitive exact; matches profile.major or any education.major)
          example: "Software Engineering,Mechanical Engineering"
        - in: query
          name: companies
          schema: { type: string }
          description: Comma-separated list of company names (case-insensitive exact; sourced from experiences)
          example: "Google,Grab"
        - in: query
          name: workFields
          schema: { type: string }
          description: Comma-separated list of predefined field-of-work names (case-insensitive; sourced from experiences)
          example: "Software Engineering,Data Science"
        - in: query
          name: cities
          schema: { type: string }
          description: Comma-separated list of domicile city names (case-insensitive **exact**; must come from `/lookup/cities`)
          example: "Jakarta,Medan"
        - in: query
          name: citizenship
          schema:
            type: string
            description: Comma-separated set from the allow-list
            example: "Citizen,Permanent Resident"
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [relevance, name_asc, name_desc]
            default: relevance
          description: When `q` is absent, `relevance` behaves as `name_asc`.
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectorySearchResponse"
              examples:
                sample:
                  value:
                    results:
                      - profileId: "usr_abc123"
                        fullName: "Jane Doe"
                        handle: "jane_doe"
                        photoUrl: "https://cdn.app.com/profiles/usr_abc123/photo.jpg"
                        headline: "Backend Engineer @ Acme | AI/ML"
                        domicileCity: "Jakarta"
                        domicileCountry: "ID"
                        citizenshipStatus: "Citizen"
                    pagination:
                      total: 150
                      page: 1
                      pageSize: 20
                      totalPages: 8
        "400":
          description: No filters provided or validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                missing_filters:
                  value: { code: VALIDATION_ERROR }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "500":
          $ref: "#/components/responses/InternalError"

  /lookup/majors:
    get:
      tags: ["Search"]
      summary: List all available majors
      description: |
        Returns all available majors from the majors table, sorted alphabetically by name. Used to populate filter UI in the directory.
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all majors
          content:
            application/json:
              schema:
                type: object
                properties:
                  majors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Major"
              examples:
                majors:
                  value:
                    majors:
                      - id: 12
                        name: Mechanical Engineering
                      - id: 13
                        name: Software Engineering
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED

  /lookup/companies:
    get:
      tags: ["Search"]
      summary: Lookup companies for autocomplete
      description: |
        Returns a list of companies that appear in user experiences.
        Supports an optional query parameter `q` for typeahead/autocomplete functionality.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Optional search term to filter company names (case-insensitive)
      responses:
        '200':
          description: List of companies matching the query or all companies if no query is provided
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
              examples:
                some_companies:
                  value:
                    - id: 12
                      name: Google
                    - id: 13
                      name: Grab
                no_companies:
                  value: []
        '401':
          description: Not authenticated or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
                    details: "Invalid or expired token"
        '500':
          $ref: "#/components/responses/InternalError"
  /lookup/work-fields:
    get:
      tags: ["Search"]
      summary: Get predefined list of Fields of Work
      description: Returns a predefined, alphabetically sorted list of work fields for filter UI.
      responses:
        '200':
          description: List of work fields
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 12
                    name:
                      type: string
                      example: Data Science
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: NOT_AUTHENTICATED
  /lookup/cities:
    get:
      tags: ["Search"]
      summary: List Indonesian cities from society members
      description: Returns distinct Indonesian cities where society members are located.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of distinct Indonesian cities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      description: City name
                      example: "Jakarta"
              examples:
                with_cities:
                  value:
                    - name: "Bandung"
                    - name: "Jakarta" 
                    - name: "Surabaya"
                no_cities:
                  value: []
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "500":
          $ref: "#/components/responses/InternalError"
  /profile/picture:
    post:
      tags: ["Profile"]
      summary: Upload or replace profile picture
      description: |
        Upload a new profile picture or replace the existing one for the authenticated user.
        
        **File Requirements:**
        - Maximum file size: 5MB
        - Supported formats: JPEG, PNG, JPG
        - File is stored in profile-pictures bucket under profiles/{userId}/
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - profile_picture
              properties:
                profile_picture:
                  type: string
                  format: binary
                  description: Profile picture file (JPEG/PNG, max 5MB)
      responses:
        "200":
          description: Profile picture uploaded successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, photoUrl]
                properties:
                  success:
                    type: boolean
                    example: true
                  photoUrl:
                    type: string
                    description: URL of the uploaded profile picture
                    example: "https://example.com/profile-pictures/profiles/550e8400-e29b-41d4-a716-446655440000/profile.jpg"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "413":
          description: File too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                file_too_large:
                  value:
                    code: FILE_TOO_LARGE
        "415":
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                unsupported_media:
                  value:
                    code: UNSUPPORTED_MEDIA_TYPE
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL

    delete:
      tags: ["Profile"]
      summary: Remove profile picture
      description: |
        Remove the current profile picture for the authenticated user. Sets the photo_url to null in the database and attempts to delete the file from storage.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile picture removed successfully
          content:
            application/json:
              schema:
                type: object
                required: [success]
                properties:
                  success:
                    type: boolean
                    example: true
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL_ERROR

  /profile/banner:
    post:
      tags: ["Profile"]
      summary: Upload or replace banner image
      description: |
        Upload a new banner image or replace the existing one for the authenticated user.
        
        **File Requirements:**
        - Maximum file size: 5MB
        - Supported formats: JPEG, PNG, JPG
        - File is stored in profile-pictures bucket under banners/{userId}/
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - banner_image
              properties:
                banner_image:
                  type: string
                  format: binary
                  description: Banner image file (JPEG/PNG, max 5MB)
      responses:
        "200":
          description: Banner image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, bannerUrl]
                properties:
                  success:
                    type: boolean
                    example: true
                  bannerUrl:
                    type: string
                    description: URL of the uploaded banner image
                    example: "https://example.com/profile-pictures/banners/550e8400-e29b-41d4-a716-446655440000/banner.jpg"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "413":
          description: File too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                file_too_large:
                  value:
                    code: FILE_TOO_LARGE
        "415":
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                unsupported_media:
                  value:
                    code: UNSUPPORTED_MEDIA_TYPE
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL

    delete:
      tags: ["Profile"]
      summary: Remove banner image
      description: |
        Remove the current banner image for the authenticated user. Sets the banner_url to null in the database and attempts to delete the file from storage.
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Banner image removed successfully
          content:
            application/json:
              schema:
                type: object
                required: [success, message]
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Banner image removed successfully"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL

  /profile/{handle}/educations:
    get:
      tags: ["Profile"]
      summary: Get educations for a profile by handle
      description: |
        Retrieve all education records for a user profile identified by their handle.
        
        **Data returned:**
        - All education records for the specified profile
        - Sorted by: endYear DESC NULLS LAST, endMonth DESC NULLS LAST, startYear DESC, startMonth DESC
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: handle
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_.-]{3,30}$'
            example: "janedoe"
          description: The unique handle/username of the profile
      responses:
        "200":
          description: List of educations for the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Education"
              examples:
                with_educations:
                  value:
                    - id: "edu_123"
                      school: "University of New South Wales"
                      program: "Bachelor of Engineering"
                      major: "Software Engineering"
                      startMonth: 2
                      startYear: 2021
                      endMonth: 11
                      endYear: 2024
                    - id: "edu_456"
                      school: "UNSW Sydney"
                      program: "Master of Information Technology"
                      major: "Artificial Intelligence"
                      startMonth: 3
                      startYear: 2025
                      endMonth: null
                      endYear: null
                empty_list:
                  value: []
        "400":
          description: Invalid handle format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Profile not found for the given handle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found:
                  value:
                    code: NOT_FOUND
                    
  /profile/{handle}/skills:
    get:
      tags: ["Profile"]
      summary: Get skills for a profile by handle
      description: |
        Retrieve all skills for a user profile identified by their handle.
        Names are deduped and sorted alphabetically.
        
        **Auth:** Bearer token required.
      security:
      - bearerAuth: []
      parameters:
        - in: path
          name: handle
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_.-]{3,30}$'
            example: "janedoe"
          description: The unique handle/username of the profile
      responses:
        "200":
          description: List of skills for the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
              examples:
                with_skills:
                  value:
                    - id: 12
                      name: Python
                    - id: 34
                      name: SQL
                    - id: 56
                      name: JavaScript
                empty_list:
                  value: []
        "400":
          description: Invalid handle format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Profile not found for the given handle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found:
                  value:
                    code: NOT_FOUND
  
  /profile/{handle}/experiences:
    get:
      tags: ["Profile"]
      summary: Get experiences for a profile by handle
      description: |
        Retrieve all experience records for a user profile identified by their handle.

        **Sorting**
        - `isCurrent` **DESC**
        - `endYear` **DESC** `NULLS LAST`
        - `endMonth` **DESC** `NULLS LAST`
        - `startYear` **DESC**
        - `startMonth` **DESC**
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: handle
          required: true
          schema:
            type: string
            pattern: '^[a-z0-9_.-]{3,30}$'
            example: "janedoe"
          description: The unique handle/username of the profile
      responses:
        "200":
          description: List of experiences for the profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Experience"
              examples:
                with_experiences:
                  value:
                    - id: "exp_123"
                      title: "Software Engineer"
                      company: "Acme Corp"
                      fieldOfWork: "Software Engineering"
                      startMonth: 2
                      startYear: 2023
                      endMonth: null
                      endYear: null
                      isCurrent: true
                      employmentType: "Full Time"
                      locationCity: "Sydney"
                      locationCountry: "AU"
                      locationType: "Hybrid"
                      description: "Backend APIs and auth services."
                    - id: "exp_987"
                      title: "Intern"
                      company: "Techify"
                      fieldOfWork: "Data Engineering"
                      startMonth: 1
                      startYear: 2022
                      endMonth: 12
                      endYear: 2022
                      isCurrent: false
                      employmentType: "Internship"
                      locationCity: "Jakarta"
                      locationCountry: "ID"
                      locationType: "On-site"
                      description: "ETL pipelines and monitoring."
                empty_list:
                  value: []
        "400":
          description: Invalid handle format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Profile not found for the given handle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found:
                  value:
                    code: NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalError"

  /profile/{handle}:
    get:
      tags: ["Profile"]
      summary: Get profile core details by user handle
      description: |
        Returns the full profile record for the given handle.
        This is a public endpoint that allows anyone to view profile information by handle.
        
        **Auth:** No authentication required.
      parameters:
        - in: path
          name: handle
          required: true
          schema: { type: string, description: "User handle" }
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProfileOK"
              examples:
                complete_profile:
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    fullName: "Jane Doe"
                    handle: "janedoe"
                    photoUrl: "https://example.com/profile.jpg"
                    bannerUrl: "https://example.com/banner.jpg"
                    isIndonesian: true
                    program: "BE"
                    major: "Computer Science"
                    level: "undergrad"
                    yearStart: 2020
                    yearGrad: 2024
                    zid: "z1234567"
                    headline: "Software Engineer"
                    domicileCity: "Sydney"
                    domicileCountry: "AU"
                    citizenshipStatus: "Citizen"
                    bio: "Passionate about building innovative software solutions."
                    socialLinks:
                      linkedin: "https://www.linkedin.com/in/janedoe"
                      github: "https://github.com/janedoe"
                      website: "https://janedoe.dev"
                    createdAt: "2024-01-15T10:30:00Z"
                    updatedAt: "2024-03-20T14:45:00Z"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                profile_not_found:
                  value:
                    code: PROFILE_NOT_FOUND

  /connections/requests:
    get:
      tags: ["Connections"]
      summary: List connection requests
      description: |
        Retrieve a paginated list of connection requests. Can filter by type to get either incoming or outgoing requests.
        Defaults to incoming requests if no type is specified.
      operationId: listConnectionRequests
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: Type of connection requests to retrieve
          required: false
          schema:
            type: string
            enum: [incoming, outgoing]
            default: incoming
          example: incoming
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
      responses:
        '200':
          description: Successfully retrieved connection requests
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IncomingConnectionRequestList'
                  - $ref: '#/components/schemas/OutgoingConnectionRequestList'
              examples:
                incoming_requests:
                  summary: Incoming connection requests
                  value:
                    results:
                      - id: "req_abc123"
                        fromUser:
                          profileId: "user_def456"
                          fullName: "John Doe"
                          handle: "johndoe"
                          avatar_url: "https://example.com/avatar1.jpg"
                        created_at: "2024-01-15T10:00:00Z"
                      - id: "req_ghi789"
                        fromUser:
                          profileId: "user_jkl012"
                          fullName: "Jane Smith"
                          handle: "janesmith"
                          avatar_url: "https://example.com/avatar2.jpg"
                        created_at: "2024-01-14T09:00:00Z"
                    pagination:
                      total: 25
                      page: 1
                      pageSize: 20
                      totalPages: 2
                outgoing_requests:
                  summary: Outgoing connection requests
                  value:
                    results:
                      - id: "req_mno345"
                        toUser:
                          profileId: "user_pqr678"
                          fullName: "Alice Johnson"
                          handle: "alicejohnson"
                          avatar_url: "https://example.com/avatar3.jpg"
                        created_at: "2024-01-13T14:30:00Z"
                    pagination:
                      total: 5
                      page: 1
                      pageSize: 20
                      totalPages: 1
                empty_list:
                  summary: No requests found
                  value:
                    results: []
                    pagination:
                      total: 0
                      page: 1
                      pageSize: 20
                      totalPages: 0
        '400':
          description: Bad request - invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              example:
                code: "BAD_REQUEST"
        '401':
          description: Authentication required or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              example:
                code: "NOT_AUTHENTICATED"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              example:
                code: "INTERNAL"

    post:
      tags: ["Connections"]
      summary: Send a connection request
      description: |
        Create a **pending** connection request from the authenticated user (sender) to `toProfileId` (receiver).

        **Validation & Logic**
        - `toProfileId` must be a valid profile UUID and not equal to the caller (no self-send).
        - Request must not exist already in **either direction** with `status=pending`.
        - Sender and receiver must **not be already connected**.
        - Neither side must have **blocked** the other.
        - Optional `message` is max **300 chars**.
        - Daily cap may apply (env: `CR_DAILY_SEND_CAP`).

        **Side effects**
        - Inserts a row in `connection_requests` with `status=pending`.
        - Emits a `notifications` row of type `connection_request` to the receiver.

      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionRequestCreate"
            examples:
              simple:
                value:
                  toProfileId: "123e4567-e89b-12d3-a456-426614174000"
                  message: "hey, let’s connect!"
      responses:
        "201":
          description: Created (pending request)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionRequestCreated"
              examples:
                created:
                  value:
                    success: true
                    requestId: "6a3b2a60-8d3e-4d02-9c7a-3d9d5d2f3a11"
                    status: "pending"
        "400":
          description: Validation error (bad uuid / self-send / message too long)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
              examples:
                bad_uuid: { value: { code: "VALIDATION_ERROR" } }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: "NOT_AUTHENTICATED" } }
        "403":
          description: Block relationship prevents requesting
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                blocked: { value: { code: "BLOCKED" } }
        "404":
          description: Receiver profile not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                not_found: { value: { code: "NOT_FOUND" } }
        "409":
          description: Conflict states (already connected / pending exists / cooldown)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                already_connected:     { value: { code: "ALREADY_CONNECTED" } }
                request_already_exists: { value: { code: "REQUEST_ALREADY_EXISTS" } }
                invalid_state:         { value: { code: "INVALID_STATE" } }
        "429":
          description: Daily cap exceeded
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                too_many: { value: { code: "TOO_MANY_REQUESTS" } }
        "500":
          $ref: "#/components/responses/InternalError"

  /connections/requests/{id}/cancel:
    post:
      tags: ["Connections"]
      summary: Cancel a pending connection request
      description: Withdraw a pending request.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the connection request to cancel
      responses:
        "200":
          description: Connection request successfully canceled (or was already canceled)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                required:
                  - success
        "401":
          description: Authentication required or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "404":
          description: Connection request not found or user is not the sender
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_found:
                  value:
                    code: NOT_FOUND
        "409":
          description: Connection request cannot be canceled in its current state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                invalid_state:
                  value:
                    code: INVALID_STATE
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL

  /connections:
    get:
      tags: ["Connections"]
      summary: List user's connections
      description: |
        Get a paginated list of the authenticated user's connections with profile information.
        Returns connections sorted by most recent first.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of connections per page (max 100)
      responses:
        "200":
          description: Successfully retrieved connections
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/ConnectionProfile"
                  pagination:
                    $ref: "#/components/schemas/PaginationInfo"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                unauthorized:
                  value:
                    code: NOT_AUTHENTICATED
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL

  /connections/{profileId}:
    delete:
      tags: ["Connections"]
      summary: Remove a connection
      description: Delete an existing connection between the authenticated user and the specified profile. This operation is idempotent - deleting a non-existing connection still returns success.
      parameters:
        - name: profileId
          in: path
          required: true
          description: The UUID of the profile to disconnect from
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Connection successfully removed (or was already absent)
          content:
            application/json:
              schema:
                type: object
                required: [success]
                properties:
                  success:
                    type: boolean
                    enum: [true]
              examples:
                success:
                  value:
                    success: true
        "401":
          description: Authentication required or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: NOT_AUTHENTICATED
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: INTERNAL

  /connections/status:
    get:
      tags: ["Connections"]
      summary: Get relationship status with another profile
      description: |
        Returns a compact matrix to drive UI states (Connect / Pending / Connected / Blocked).
        Checks are performed in this order:
        - Block status
        - Existing connection
        - Pending request (both directions)
        - Ability to send a new request
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: withProfileId
          required: true
          schema:
            type: string
            format: uuid
          description: The target profile's id
      responses:
        "200":
          description: Relationship status
          content:
            application/json:
              schema:
                type: object
                required:
                  [connected, pendingOutgoing, pendingIncoming, blockedByMe, blockedMe, canSendRequest]
                properties:
                  connected:        { type: boolean, description: "Already connected (undirected)" }
                  pendingOutgoing:  { type: boolean, description: "You sent a request and it's pending" }
                  pendingIncoming:  { type: boolean, description: "They sent you a request and it's pending" }
                  blockedByMe:      { type: boolean, description: "You blocked the other user" }
                  blockedMe:        { type: boolean, description: "The other user blocked you" }
                  canSendRequest:   { type: boolean, description: "You are allowed to send a new request now" }
              examples:
                example:
                  value:
                    connected: false
                    pendingOutgoing: true
                    pendingIncoming: false
                    blockedByMe: false
                    blockedMe: false
                    canSendRequest: false
        "400":
          description: Validation error (missing query or malformed)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                missing_param: { value: { code: VALIDATION_ERROR } }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                no_auth: { value: { code: NOT_AUTHENTICATED } }
        "404":
          description: Target profile not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                not_found: { value: { code: NOT_FOUND } }
        "500":
          $ref: "#/components/responses/InternalError"

  /users/{profileId}/block:
    post:
      tags: ["Connections"]
      summary: Block a user to stop all contact
      description: |
        Block another user to prevent all future contact and interaction.
        
        **Flow:**
        1. Validate user cannot block themselves
        2. Verify target user exists
        3. Create block relationship in database
        4. Remove existing connection if present
        5. Auto-decline/cancel any pending requests between users (handled by other stories)
        
        **Effects:**
        - Adds row to blocks table (unique per pair)
        - Removes existing connection if present
        - Future requests between users are prevented
        - Users are excluded from each other's search results
        
        **Auth:** Bearer token required.
      security:
        - bearerAuth: []
      parameters:
        - name: profileId
          in: path
          required: true
          description: UUID of the user to block
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User successfully blocked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessOnly"
              examples:
                success:
                  value:
                    success: true
        "400":
          description: Validation error (cannot block self)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                cannot_block_self:
                  value:
                    code: "VALIDATION_ERROR"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_authenticated:
                  value:
                    code: "NOT_AUTHENTICATED"
        "404":
          description: Target user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                user_not_found:
                  value:
                    code: "NOT_FOUND"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal_error:
                  value:
                    code: "INTERNAL"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  responses:
    InternalError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorSimple"
          examples:
            internal: { value: { code: INTERNAL } }

  requestBodies:
    LoginBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email:
                type: string
                format: email
                example: jane@gmail.com
              password:
                type: string
                minLength: 1
                example: Abcd1234

  schemas:
    RegisterRequest:
      type: object
      required:
        - fullName
        - zid
        - level
        - yearIntake
        - isIndonesian
        - program
        - major
        - email
        - password
        - confirmPassword
      properties:
        fullName: { type: string, minLength: 1 }
        zid:
          type: string
          pattern: "^z[0-9]{7}$"
          description: UNSW zID (lowercase z + 7 digits)
        level: { type: string, example: undergrad }
        yearIntake: { type: integer, minimum: 2000, maximum: 2100 }
        isIndonesian: { type: boolean }
        program: { type: string }
        major: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        confirmPassword: { type: string, minLength: 8 }

    RegisterCreated:
      type: object
      required: [success, userId, resumeToken]
      properties:
        success: { type: boolean, example: true }
        userId:
          type: string
          description: The signup row ID (`user_signups.id`)
          example: "a3c5b2c1-7c21-4eaa-bf9e-2a90b6b3a111"
        resumeToken:
          type: string
          description: Short-lived token (30m) prefixed with `res_` used to continue the OTP flow
          example: "res_eyJhbGciOi..."

    PendingExists:
      type: object
      required: [code, resumeToken]
      properties:
        code:
          type: string
          enum: [PENDING_VERIFICATION_EXISTS]
        resumeToken:
          type: string
          description: Fresh 30-min token to resume OTP flow

    VerifyOtpRequest:
      type: object
      required: [resumeToken, otp]
      properties:
        resumeToken:
          type: string
          description: Short-lived token (prefixed `res_`) from /auth/register
          example: "res_eyJhbGciOi..."
        otp:
          type: string
          pattern: "^[0-9]{6}$"
          description: 6-digit numeric code
          example: "123456"

    VerifyOtpOK:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: "Account verified successfully" }

    ResendOtpRequest:
      type: object
      required: [resumeToken]
      properties:
        resumeToken:
          type: string
          description: Short-lived token (prefixed `res_`) from /auth/register
          example: "res_eyJhbGciOi..."

    ResendOtpOK:
      type: object
      required: [success]
      properties:
        success: { type: boolean, example: true }

    LoginSuccess:
      type: object
      required: [success, userId, accessToken, expiresIn]
      properties:
        success: { type: boolean, example: true }
        userId: { type: string, example: "usr_abc123" }
        accessToken: { type: string, example: "jwt_eyJhbGciOi..." }
        expiresIn: { type: integer, example: 900 }

    RefreshSuccess:
      type: object
      required: [success, accessToken, expiresIn]
      properties:
        success: { type: boolean, example: true }
        accessToken: { type: string, example: "jwt_eyJhbGciOi..." }
        expiresIn: { type: integer, example: 900 }

    ChangeEmailPreVerifyRequest:
      type: object
      required:
        - resumeToken
        - newEmail
      properties:
        resumeToken:
          type: string
          description: Short-lived token (30m) prefixed with `res_` used to continue the OTP flow
          example: "res_eyJhbGciOi..."
        newEmail:
          type: string
          format: email

    ChangeEmailPreVerifyOK:
      type: object
      required:
        - success
        - resumeToken
      properties:
        success:
          type: boolean
        resumeToken:
          description: The new resume token bound to the new email
          example: "res_def456..."

    ChangeEmailRequest:
      type: object
      required:
        - newEmail
        - currentPassword
      properties:
        newEmail:
          type: string
          format: email
          description: The new email address to change to
          example: "john.new@gmail.com"
        currentPassword:
          type: string
          description: Current password for verification
          example: "MySecurePassword123"

    ChangeEmailRequestResponse:
      type: object
      required:
        - success
        - emailMasked
        - expiresInSeconds
      properties:
        success:
          type: boolean
          example: true
        emailMasked:
          type: string
          description: Masked version of the new email for privacy
          example: "j***@g***il.com"
        expiresInSeconds:
          type: integer
          description: OTP expiry time in seconds
          example: 600

    VerifyEmailChangeRequest:
      type: object
      required:
        - otp
      properties:
        otp:
          type: string
          pattern: "^[0-9]{6}$"
          description: 6-digit OTP received via email
          example: "123456"

    VerifyEmailChangeResponse:
      type: object
      required:
        - success
        - message
        - newAccessToken
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Email updated successfully"
        newAccessToken:
          type: string
          description: New JWT access token (existing tokens are invalidated)
          example: "jwt_eyJhbGciOi..."

    ResendEmailOtpResponse:
      type: object
      required:
        - success
        - expiresInSeconds
      properties:
        success:
          type: boolean
          example: true
        expiresInSeconds:
          type: integer
          description: OTP expiry time in seconds
          example: 600

    EmailOnlyRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    ResetGenericOk:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: true }
        message: { type: string }

    SuccessOnly:
      type: object
      required: [success]
      properties:
        success: { type: boolean, example: true }

    VerifyPasswordResetOtpRequest:
      type: object
      required: [email, otp]
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
          pattern: "^[0-9]{6}$"
          description: 6-digit numeric code

    VerifyPasswordResetOtpResponse:
      type: object
      required: [success, resetSessionToken, expiresIn]
      properties:
        success: { type: boolean, example: true }
        resetSessionToken:
          type: string
          description: Short-lived JWT that authorizes password reset
          example: "rst_eyJ..."
        expiresIn:
          type: integer
          description: Time-to-live in seconds
          example: 600

    ResetPasswordRequest:
      type: object
      required: [resetSessionToken, newPassword, confirmPassword]
      properties:
        resetSessionToken:
          type: string
          example: "rst_eyJ..."
        newPassword:
          type: string
          minLength: 8
        confirmPassword:
          type: string
          minLength: 8

    ResetPasswordResponse:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: true }
        message:
          type: string
          example: "Password has been reset"

    ErrorSimple:
      type: object
      required: [code]
      properties:
        code:
          type: string
          enum:
            - VALIDATION_ERROR
            - EMAIL_EXISTS
            - ZID_EXISTS
            - ZID_MISMATCH
            - PENDING_VERIFICATION_EXISTS
            - PENDING_NOT_FOUND
            - ALREADY_VERIFIED
            - RESUME_TOKEN_INVALID
            - OTP_INVALID
            - OTP_EXPIRED
            - OTP_LOCKED
            - OTP_COOLDOWN
            - OTP_RESEND_LIMIT
            - INVALID_CREDENTIALS
            - ACCOUNT_NOT_VERIFIED
            - NO_REFRESH_TOKEN
            - INVALID_REFRESH_TOKEN
            - NOT_AUTHENTICATED
            - USER_NOT_FOUND
            - NO_PENDING_EMAIL_CHANGE
            - TOO_MANY_REQUESTS
            - INTERNAL
            - HANDLE_TAKEN
            - FILE_TOO_LARGE              
            - UNSUPPORTED_MEDIA_TYPE      
            - INTERNAL_ERROR
            - NOT_FOUND
            - INVALID_STATE
            - ALREADY_CONNECTED
            - REQUEST_ALREADY_EXISTS
            - BLOCKED

        details:
          type: string
          description: Optional additional details about the error

    ValidationError:
      type: object
      required: [code, details]
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR]
        details:
          type: object
          description: Zod-flattened errors (shape may vary)
          properties:
            fieldErrors:
              type: object
    
    PendingContextOK:
      type: object
      required:
        - emailMasked
        - status
        - resend
      properties:
        emailMasked:
          type: string
          description: Masked email address for privacy
          example: "j***@u***.edu"
        status:
          type: string
          description: Current signup status
          example: "PENDING_VERIFICATION"
        resend:
          type: object
          required:
            - cooldownSeconds
            - remainingToday
          properties:
            cooldownSeconds:
              type: integer
              description: Seconds remaining before next OTP can be requested
            remainingToday:
              type: integer
              description: Number of OTP resends remaining today (daily limit is 5)
    
    HandleRequest:
      type: object
      required: [handle]
      properties:
        handle:
          type: string
          pattern: "^[a-z0-9_.-]{3,30}$"
          description: Lowercase slug; unique case-insensitively

    HandleOK:
      type: object
      required: [success, handle]
      properties:
        success: { type: boolean, example: true }
        handle:
          type: string
          example: "janedoe"

    HandleAvailability:
      type: object
      required: [available]
      properties:
        available:
          type: boolean
          example: true

    Skill:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string

    GetProfileOK:
      type: object
      required:
        - id
        - fullName
        - isIndonesian
        - level
        - yearStart
        - zid
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique profile identifier
        fullName:
          type: string
          description: User's full name
        handle:
          type: string
          description: User's unique handle/username
        photoUrl:
          type: string
          description: URL to user's profile photo
        bannerUrl:
          type: string
          description: URL to user's banner image
        isIndonesian:
          type: boolean
          description: Whether the user is Indonesian or not
        program:
          type: string
          description: the user's academic program or user's education program
        major:
          type: string
          description: the user's major or user's education major
        level:
          type: string
          description: Academic level
        yearStart:
          type: integer
          description: Year the user started their studies
        yearGrad:
          type: integer
          nullable: true
          description: Year the user graduated or will graduate
        zid:
          type: string
          description: UNSW student ID
        headline:
          type: string
          description: User's professional headline
        domicileCity:
          type: string
          description: User's city of residence
        domicileCountry:
          type: string
          description: User's country of residence (ISO 3166-1 alpha-2)
        bio:
          type: string
          description: User set bio
        socialLinks:
          type: object
          description: User's social media links
          properties:
            linkedin:
              type: string
              description: LinkedIn profile URL
            github:
              type: string
              description: GitHub profile URL
            website:
              type: string
              description: Personal website URL
        createdAt:
          type: string
          description: Profile creation timestamp
        updatedAt:
          type: string
          description: Profile last update timestamp
          
    Major:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: integer
            example: 12
          name:
            type: string
            example: "Software Engineering"

    Company:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: Unique identifier of the company
          example: 12
        name:
          type: string
          description: Name of the company
          example: Google

    UpdateProfileRequest:
      type: object
      properties:
        fullName:
          type: string
          description: User's full name
          example: "Jane Doe"
        headline:
          type: string
          nullable: true
          description: Professional headline or tagline
          example: "Backend Engineer @ Acme | AI/ML"
        isIndonesian:
          type: boolean
          description: Whether the user is Indonesian
          example: true
        program:
          type: string
          description: The user's academic program
          example: "BE"
        major:
          type: string
          description: The user's major
          example: "Software Engineering"
        level:
          type: string
          enum: [foundation, diploma, undergrad, postgrad, phd]
          description: Academic level
          example: "undergrad"
        yearStart:
          type: integer
          minimum: 2000
          maximum: 2100
          description: Year the user started their studies
          example: 2022
        yearGrad:
          type: integer
          nullable: true
          minimum: 2000
          maximum: 2100
          description: Year the user graduated or will graduate
          example: 2026
        domicileCity:
          type: string
          description: User's city of residence
          example: "Sydney"
        domicileCountry:
          type: string
          pattern: "^[A-Z]{2}$"
          description: User's country of residence (ISO 3166-1 alpha-2)
          example: "AU"
        bio:
          type: string
          nullable: true
          description: User's bio or about section
          example: "I ship boring, reliable services."

    AddEducationRequest:
      type: object
      required:
        - school
        - program
        - major
        - startMonth
        - startYear
      properties:
        school:
          type: string
          minLength: 1
          maxLength: 30
          description: Name of the school
          example: "UNSW"
        program:
          type: string
          minLength: 1
          description: Name of the academic program
          example: "Bachelor of Engineering"
        major:
          type: string
          minLength: 1
          description: Name of the major
          example: "Software Engineering"
        startMonth:
          type: integer
          minimum: 1
          maximum: 12
          description: Month when the education started
          example: 2
        startYear:
          type: integer
          minimum: 1900
          maximum: 2100
          description: Year when the education started
          example: 2022
        endMonth:
          type: integer
          minimum: 1
          maximum: 12
          nullable: true
          description: Month when the education ended
          example: null
        endYear:
          type: integer
          minimum: 1900
          maximum: 2100
          nullable: true
          description: Year when the education ended
          example: null

    UpdateEducationRequest:
      type: object
      properties:
        school:
          type: string
          minLength: 1
          maxLength: 30
          description: Name of the school
        program:
          type: string
          minLength: 1
          description: Name of the academic program
        major:
          type: string
          minLength: 1
          description: Name of the major
        endMonth:
          type: integer
          minimum: 1
          maximum: 12
          nullable: true
          description: Month when the education ended
        endYear:
          type: integer
          minimum: 1900
          maximum: 2100
          nullable: true
          description: Year when the education ended

    Education:
      type: object
      required:
        - id
        - school
        - program
        - major
        - startMonth
        - startYear
      properties:
        id:
          type: string
          description: Unique education record identifier
          example: "edu_123"
        school:
          type: string
          description: Name of the school
          example: "UNSW"
        program:
          type: string
          description: Name of the academic program
          example: "Bachelor of Engineering"
        major:
          type: string
          description: Name of the major
          example: "Software Engineering"
        startMonth:
          type: integer
          minimum: 1
          maximum: 12
          description: Month when the education started
          example: 2
        startYear:
          type: integer
          minimum: 1900
          maximum: 2100
          description: Year when the education started
          example: 2022
        endMonth:
          type: integer
          nullable: true
          minimum: 1
          maximum: 12
          description: Month when the education ended
          example: null
        endYear:
          type: integer
          nullable: true
          minimum: 1900
          maximum: 2100
          description: Year when the education ended
          example: null
    
    Experience:
          type: object
          required:
            - id
            - title
            - startMonth
            - startYear
            - isCurrent
          properties:
            id:            { type: string, description: "Experience id (uuid)" }
            title:         { type: string, description: "Role title" }
            company:       { type: string, nullable: true }
            fieldOfWork:   { type: string, nullable: true }
            startMonth:    { type: integer, minimum: 1, maximum: 12 }
            startYear:     { type: integer, minimum: 1900, maximum: 2100 }
            endMonth:      { type: integer, nullable: true, minimum: 1, maximum: 12 }
            endYear:       { type: integer, nullable: true, minimum: 1900, maximum: 2100 }
            isCurrent:     { type: boolean, description: "Is currently employed here?" }
            employmentType: { type: string, nullable: true, description: "Full Time, Part Time, Contract, Internship, etc." }
            locationCity:  { type: string, nullable: true }
            locationCountry: { type: string, nullable: true, minLength: 2, maxLength: 2 }
            locationType:  { type: string, nullable: true, description: "Onsite, Remote, Hybrid" }
            description:   { type: string, nullable: true }

    ExperienceCreateRequest:
      type: object
      required:
        - roleTitle
        - company
        - startMonth
        - startYear
        - isCurrent
      properties:
        roleTitle:
          type: string
          minLength: 1
          maxLength: 120
          description: "maps to experiences.role_title"
        company:
          type: string
          minLength: 1
          maxLength: 120
          description: "lookup → companies.id"
        fieldOfWork:
          type: string
          minLength: 1
          maxLength: 120
          nullable: true
          description: "lookup → fields_of_work.id (optional)"
        employmentType:
          type: string
          nullable: true
          enum: [full_time, part_time, contract, internship, temporary, volunteer, freelance]
        locationCity:
          type: string
          nullable: true
        locationCountry:
          type: string
          nullable: true
          minLength: 2
          maxLength: 2
          pattern: '^[A-Z]{2}$'
        locationType:
          type: string
          nullable: true
          enum: [on_site, remote, hybrid]
        startMonth:
          type: integer
          minimum: 1
          maximum: 12
        startYear:
          type: integer
          minimum: 1900
          maximum: 2100
        endMonth:
          type: integer
          nullable: true
          minimum: 1
          maximum: 12
        endYear:
          type: integer
          nullable: true
          minimum: 1900
          maximum: 2100
        isCurrent:
          type: boolean
          description: "Is currently employed here?"
        description:
          type: string
          nullable: true
          maxLength: 2000
    DirectorySearchResponse:
      type: object
      required: [results, pagination]
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/DirectorySearchResult"
        pagination:
          $ref: "#/components/schemas/Pagination"

    DirectorySearchResult:
      type: object
      required:
        - profileId
        - fullName
      properties:
        profileId:
          type: string
          description: Profile UUID
          example: "2abc8f8a-a7cc-4fbe-9628-55bc8bd24579"
        fullName:
          type: string
          example: "Jane Doe"
        handle:
          type: string
          nullable: true
          example: "jane_doe"
        photoUrl:
          type: string
          nullable: true
          example: "https://cdn.app.com/profiles/usr_abc123/photo.jpg"
        headline:
          type: string
          nullable: true
          example: "Backend Engineer @ Acme | AI/ML"
        domicileCity:
          type: string
          nullable: true
          example: "Jakarta"
        domicileCountry:
          type: string
          nullable: true
          example: "ID"
        citizenshipStatus:
          type: string
          nullable: true
          enum: ["Citizen", "Permanent Resident"]

    ConnectionProfile:
      type: object
      required: [profileId, fullName, handle, photoUrl, headline]
      properties:
        profileId:
          type: string
          format: uuid
          description: UUID of the connected user's profile
          example: "123e4567-e89b-12d3-a456-426614174000"
        fullName:
          type: string
          description: Full name of the connected user
          example: "Alex Johnson"
        handle:
          type: string
          nullable: true
          description: User's handle/username
          example: "alex"
        photoUrl:
          type: string
          nullable: true
          description: URL to the user's profile photo
          example: "https://example.com/photos/alex.jpg"
        headline:
          type: string
          nullable: true
          description: User's professional headline
          example: "Software Engineer at Tech Corp"

    PaginationInfo:
      type: object
      required: [total, page, pageSize, totalPages]
      properties:
        total:
          type: integer
          description: Total number of connections
          example: 50
        page:
          type: integer
          description: Current page number
          example: 1
        pageSize:
          type: integer
          description: Number of items per page
          example: 20
        totalPages:
          type: integer
          description: Total number of pages
          example: 3

    Pagination:
      type: object
      required: [total, page, pageSize, totalPages]
      properties:
        total:      { type: integer, example: 150 }
        page:       { type: integer, example: 1 }
        pageSize:   { type: integer, example: 20 }
        totalPages: { type: integer, example: 8 }

    ConnectionRequestCreate:
      type: object
      required: [toProfileId]
      properties:
        toProfileId:
          type: string
          format: uuid
          description: Receiver profile UUID
        message:
          type: string
          maxLength: 300
          nullable: true
          description: Optional note to the receiver (≤ 300 chars)

    ConnectionRequestCreated:
      type: object
      required: [success, requestId, status]
      properties:
        success:
          type: boolean
          example: true
        requestId:
          type: string
          format: uuid
          example: "6a3b2a60-8d3e-4d02-9c7a-3d9d5d2f3a11"
        status:
          type: string
          enum: [pending]
          example: pending
    
    IncomingConnectionRequest:
      type: object
      description: A connection request received by the current user
      properties:
        id:
          type: string
          description: Unique identifier for the connection request
          example: "req_abc123"
        fromUser:
          $ref: '#/components/schemas/UserProfile'
        created_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the request was created
          example: "2024-01-15T10:00:00Z"
      required:
        - id
        - fromUser
        - created_at

    OutgoingConnectionRequest:
      type: object
      description: A connection request sent by the current user
      properties:
        id:
          type: string
          description: Unique identifier for the connection request
          example: "req_abc123"
        toUser:
          $ref: '#/components/schemas/UserProfile'
        created_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp when the request was created
          example: "2024-01-15T10:00:00Z"
      required:
        - id
        - toUser
        - created_at
    
    IncomingConnectionRequestList:
      type: object
      description: Paginated list of incoming connection requests
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/IncomingConnectionRequest'
          description: Array of incoming connection requests
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - results
        - pagination

    OutgoingConnectionRequestList:
      type: object
      description: Paginated list of outgoing connection requests
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/OutgoingConnectionRequest'
          description: Array of outgoing connection requests
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - results
        - pagination
    
    UserProfile:
      type: object
      description: Basic user profile information
      properties:
        profileId:
          type: string
          description: Unique identifier for the user
          example: "user_abc123"
        fullName:
          type: string
          description: User's full name
          example: "John Doe"
        handle:
          type: string
          description: User's unique handle/username
          example: "johndoe"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: URL to user's avatar image
          example: "https://example.com/avatars/johndoe.jpg"
      required:
        - profileId
        - fullName
        - handle
        - avatar_url
