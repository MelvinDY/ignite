openapi: 3.0.3
info:
  title: Ignite Backend (Prototype)
  version: 0.2.0
  description: |
    This endpoint creates (or revives) a **PENDING_VERIFICATION** signup and
    **sends a 6-digit OTP email** to the user. It also returns a short-lived
    **resumeToken (30 minutes)** that the client should carry to the OTP screen.

servers:
  - url: http://localhost:5000/api
    description: Local dev

paths:
  /auth/register:
    post:
      summary: Register new account
      description: |
        **Flow**
        1) Validate payload (email format, zID `^z[0-9]{7}$`, password ≥ 8, confirm matches).  
        2) Reject if email already belongs to an **ACTIVE** user (`EMAIL_EXISTS`).  
        3) Reject if zID is already used by an **ACTIVE** user (`ZID_EXISTS`).  
        4) If a **PENDING** signup exists (same email or same zID), return **409 `PENDING_VERIFICATION_EXISTS`**
           with a **fresh 30-min resumeToken**.
        5) If an **EXPIRED** signup exists **for the same zID**, **revive** it to `PENDING_VERIFICATION`
           (updating `signup_email` if different), **send OTP**, and return 201 + resumeToken.  
        6) Otherwise, create a new `PENDING_VERIFICATION` signup, **send OTP**, and return 201 + resumeToken.

        **Side effects**
        - Stores a hashed OTP (`otp_hash`) with **TTL +10m**, resets counters (`otp_attempts=0`, `otp_resend_count=0`),
          and sets `last_otp_sent_at`.
        - Logs a registration event (no PII beyond `userId`).
        - Rate limit: **10 requests/hour** per **(IP + email)** → **429** thereafter.

        **Notes**
        - The **resumeToken** is prefixed with `res_` and **expires in 30 minutes**.
        - This API follows a **zID-first revival policy**. If an EXPIRED signup exists for the same
          **email** but **different zID**, the request is rejected with **409 `ZID_MISMATCH`**.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            examples:
              valid:
                value:
                  fullName: Jane Doe
                  zid: z1234567
                  level: undergrad
                  yearIntake: 2024
                  isIndonesian: true
                  program: BE
                  major: Software Engineering
                  email: jane@gmail.com
                  password: Abcd1234
                  confirmPassword: Abcd1234

      responses:
        "201":
          description: Created (new or revived PENDING signup; OTP email sent)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterCreated"
              examples:
                created_new:
                  summary: New signup created
                  value:
                    success: true
                    userId: "a3c5b2c1-7c21-4eaa-bf9e-2a90b6b3a111"
                    resumeToken: "res_eyJhbGciOi..."
                revived:
                  summary: EXPIRED signup revived by zID
                  value:
                    success: true
                    userId: "3f1d6b22-6e22-45f8-8b9d-9bcbe0a1d222"
                    resumeToken: "res_eyJhbGciOi..."

        "400":
          description: Validation error (zod)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              examples:
                bad_email:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        email:
                          - Invalid email
                password_mismatch:
                  value:
                    code: VALIDATION_ERROR
                    details:
                      fieldErrors:
                        confirmPassword:
                          - Passwords do not match

        "409":
          description: Conflict — active user exists or pending already created
          content:
            application/json:
              oneOf:
                - $ref: "#/components/schemas/ErrorSimple"
                - $ref: "#/components/schemas/PendingExists"
              examples:
                email_exists:
                  value:
                    code: EMAIL_EXISTS
                zid_exists:
                  value:
                    code: ZID_EXISTS
                pending_exists:
                  value:
                    code: PENDING_VERIFICATION_EXISTS
                    resumeToken: "res_eyJhbGciOi..."
                zid_mismatch:
                  value:
                    code: ZID_MISMATCH

        "429":
          description: "Too many requests (rate limit hit: 10 req/hour per IP+email)"
          headers:
            X-RateLimit-Limit:
              schema:
                type: string
              description: The request limit for the current window.
            X-RateLimit-Remaining:
              schema:
                type: string
              description: Requests left in the current window.
            X-RateLimit-Reset:
              schema:
                type: string
              description: UNIX timestamp when the window resets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                too_many:
                  value:
                    code: TOO_MANY_REQUESTS

        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                internal:
                  value:
                    code: INTERNAL

  /auth/verify-otp:
    post:
      summary: Verify OTP (Activate account)
      description: |
        Verify the 6-digit OTP for a **PENDING_VERIFICATION** signup.
        On success, the account becomes **ACTIVE**, OTP state is cleared,
        and the resumeToken is invalidated.

        Rules
        - `resumeToken` must be valid and map to a pending signup.
        - OTP must match the stored hash, not be expired, and attempts must be < 5.

        Side effects
        - On success: `status=ACTIVE`, `email_verified_at=now`, OTP fields cleared, resumeToken invalidated.
        - On failure: increment `otp_attempts`; when attempts reach 5, the OTP is locked.

        Rate limit
        - Example: 10 requests / 10 minutes per (IP + resumeToken) → 429 thereafter.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequest"
            examples:
              valid:
                value:
                  resumeToken: "res_eyJhbGciOi..."
                  otp: "123456"
      responses:
        "200":
          description: OTP verified; account activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyOtpOK"
              examples:
                ok:
                  value:
                    success: true
                    message: "Account verified successfully"
        "400":
          description: Bad/expired OTP or validation error
          content:
            application/json:
              oneOf:
                - $ref: "#/components/schemas/ErrorSimple"
                - $ref: "#/components/schemas/ValidationError"
              examples:
                otp_invalid: { value: { code: OTP_INVALID } }
                otp_expired: { value: { code: OTP_EXPIRED } }
        "401":
          description: Invalid or expired resume token
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                bad_token: { value: { code: RESUME_TOKEN_INVALID } }
        "404":
          description: Pending signup not found (includes EXPIRED users)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                not_found: { value: { code: PENDING_NOT_FOUND } }
        "409":
          description: User already verified
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                already_verified: { value: { code: ALREADY_VERIFIED } }
        "423":
          description: OTP locked after too many failed attempts
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                locked: { value: { code: OTP_LOCKED } }
        "429":
          description: Too many requests (rate limit hit)
          headers:
            X-RateLimit-Limit: { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
            X-RateLimit-Reset: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorSimple" }
              examples:
                too_many: { value: { code: TOO_MANY_REQUESTS } }
  /auth/pending/email:
    patch:
      summary: Change Email (Pre-Verification)
      description: |
        Allows unverified users to fix a mistyped email before completing verification.
        
        **Flow**
        
        1) Validate `resumeToken` and `newEmail` format.
        2) Ensure no ACTIVE user already owns `newEmail` → **409 `EMAIL_EXISTS`**.
        3) Ensure user status = `PENDING_VERIFICATION` → **409 `ALREADY_VERIFIED`** if ACTIVE.
        4) Update user email in database.
        5) Invalidate all prior OTP + resumeToken.
        6) Rotate a new resumeToken bound to newEmail.
        7) Generate new OTP (+10m), reset counters (otp_attempts=0, otp_resend_count=0).
        8) Send new OTP email to the new address.

        **Side effects**
        - Updates `signup_email` in `user_signups` table
        - Clears existing OTP state (hash, expiry, attempts)  
        - Invalidates the old resume token
        - Issues fresh resume token with 30min TTL
        - Sends new 6-digit OTP email with 10min TTL

      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailPreVerifyRequest'
            examples:
              valid:
                value:
                  resumeToken: "res_eyJhbGciOi..."
                  newEmail: "jane.new@gmail.com"
      responses:
        '200':
          description: Email changed; Invalidates existing OTP & token; Sends new OTP & token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeEmailPreVerifyOK'
              examples:
                ok:
                  value:
                    success: true
                    resumeToken: "res_def456eyJbg..."
        '400':
          description: Validation error (zod)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                validation_error:
                  value:
                    code: VALIDATION_ERROR
        '401':
          description: Invalid or expired resume token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                bad_token:
                  value:
                    code: RESUME_TOKEN_INVALID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                user_not_found:
                  value:
                    code: PENDING_NOT_FOUND
        '409':
          description: New email already used by active user or user is already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSimple'
              examples:
                email_exists:
                  value:
                    code: EMAIL_EXISTS
                already_verified:
                  value:
                    code: ALREADY_VERIFIED

  /auth/login:
    post:
      summary: Log in a user
      description: |
        Authenticates an **ACTIVE** user with their email and password.

        On success, it returns a short-lived **accessToken** (~15 min) for API calls
        and sets a long-lived **refreshToken** (~7 days) in a `Secure`, `HttpOnly` cookie
        to maintain the user's session.
      requestBody:
        $ref: "#/components/requestBodies/LoginBody"
      responses:
        "200":
          description: Login successful.
          headers:
            Set-Cookie:
              description: The refresh token cookie for maintaining sessions
              schema:
                type: string
                example: refreshToken=rft_eyJhbGciOi...; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=604800
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"
              examples:
                success:
                  value:
                    success: true
                    userId: "usr_abc123"
                    accessToken: "jwt_eyJhbGciOi..."
                    expiresIn: 900
        "400":
          description: Validation error for missing or invalid fields.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                missing_fields:
                  value: { code: VALIDATION_ERROR }
        "401":
          description: Invalid credentials (unknown email or wrong password).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                invalid:
                  value: { code: INVALID_CREDENTIALS }
        "403":
          description: The user's account is not in an ACTIVE state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                not_active:
                  value: { code: ACCOUNT_NOT_VERIFIED }
        "429":
          description: Too many failed login attempts (rate limit hit).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                too_many:
                  value: { code: TOO_MANY_REQUESTS }
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/refresh:
    post:
      summary: Refresh access token
      description: |
        Issues a new `accessToken` using the `refreshToken` stored in the `HttpOnly` cookie.
        No request body is required as the cookie is sent automatically by the browser.
      responses:
        "200":
          description: Token refreshed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshSuccess"
              examples:
                success:
                  value:
                    success: true
                    accessToken: "jwt_eyJhbGciOi..."
                    expiresIn: 900
        "401":
          description: Refresh token is missing, invalid, or expired.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorSimple"
              examples:
                no_token:
                  value: { code: NO_REFRESH_TOKEN }
                invalid_token:
                  value: { code: INVALID_REFRESH_TOKEN }
        "500":
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - fullName
        - zid
        - level
        - yearIntake
        - isIndonesian
        - program
        - major
        - email
        - password
        - confirmPassword
      properties:
        fullName:
          type: string
          minLength: 1
        zid:
          type: string
          pattern: "^z[0-9]{7}$"
          description: UNSW zID (lowercase z + 7 digits)
        level:
          type: string
          description: Academic level (stored as enum in DB)
          example: undergrad
        yearIntake:
          type: integer
          minimum: 2000
          maximum: 2100
        isIndonesian:
          type: boolean
        program:
          type: string
        major:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        confirmPassword:
          type: string
          minLength: 8

    RegisterCreated:
      type: object
      required:
        - success
        - userId
        - resumeToken
      properties:
        success:
          type: boolean
          example: true
        userId:
          type: string
          description: The signup row ID (user_signups.id)
          example: "a3c5b2c1-7c21-4eaa-bf9e-2a90b6b3a111"
        resumeToken:
          type: string
          description: Short-lived token (30m) prefixed with `res_` used to continue the OTP flow
          example: "res_eyJhbGciOi..."

    PendingExists:
      type: object
      required:
        - code
        - resumeToken
      properties:
        code:
          type: string
          enum:
            - PENDING_VERIFICATION_EXISTS
        resumeToken:
          type: string
          description: Fresh 30-min token to resume OTP flow

    VerifyOtpRequest:
      type: object
      required: [resumeToken, otp]
      properties:
        resumeToken:
          type: string
          description: Short-lived token (prefixed `res_`) from /auth/register
          example: "res_eyJhbGciOi..."
        otp:
          type: string
          pattern: "^[0-9]{6}$"
          description: 6-digit numeric code
          example: "123456"

    VerifyOtpOK:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: "Account verified successfully" }

    ErrorSimple:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          enum:
            - VALIDATION_ERROR
            - EMAIL_EXISTS
            - ZID_EXISTS
            - ZID_MISMATCH
            - TOO_MANY_REQUESTS
            - INTERNAL
            - RESUME_TOKEN_INVALID
            - PENDING_NOT_FOUND
            - ALREADY_VERIFIED
            - OTP_INVALID
            - OTP_EXPIRED
            - OTP_LOCKED

    ValidationError:
      type: object
      required:
        - code
        - details
      properties:
        code:
          type: string
          enum:
            - VALIDATION_ERROR
        details:
          type: object
          description: Zod-flattened errors (shape may vary)
          properties:
            fieldErrors:
              type: object

    ChangeEmailPreVerifyRequest:
      type: object
      required:
        - resumeToken
        - newEmail
      properties:
        resumeToken:
          type: string
          description: Short-lived token (30m) prefixed with `res_` used to continue the OTP flow
          example: "res_eyJhbGciOi..."
        newEmail:
          type: string
          format: email

    ChangeEmailPreVerifyOK:
      type: object
      required:
        - success
        - resumeToken
      properties:
        success:
          type: boolean
        resumeToken:
          description: The new resume token bound to the new email
          example: "res_def456..."